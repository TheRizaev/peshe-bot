import logging
import openai
from openai import AsyncOpenAI
import asyncio
import json
import os
import re
import emoji
import unicodedata
import random
import groq
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (Message, CallbackQuery, BotCommand, MenuButtonCommands,
                           InputMediaPhoto, InputMediaVideo)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# =========================
# config.py –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
# TELEGRAM_TOKEN, OPENAI_API_KEY, ADMINS = [...]
# =========================
from config import TELEGRAM_TOKEN, GROQ_API_KEY, ADMINS

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
groq_client = groq.Groq(api_key=GROQ_API_KEY)


# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
emogies = ["‚ù§Ô∏è","üëç","üëé","ü§£","üò¢","üî•","ü§¨","üôè","üò±"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

CHANNELS_FILE = 'channels.json'

# =========================
# –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –∫–∞–Ω–∞–ª–æ–≤
# =========================
def save_channels():
    with open(CHANNELS_FILE, 'w', encoding='utf-8') as f:
        json.dump(CHANNELS_DB, f, ensure_ascii=False, indent=2)

def load_channels():
    global CHANNELS_DB
    if os.path.exists(CHANNELS_FILE):
        with open(CHANNELS_FILE, 'r', encoding='utf-8') as f:
            CHANNELS_DB = json.load(f)
    else:
        CHANNELS_DB = []

# –ó–∞–≥—Ä—É–∑–∏–º –∫–∞–Ω–∞–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
CHANNELS_DB = []
load_channels()

# =========================
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
# =========================
def remove_telegram_links(text: str) -> str:
    return re.sub(r'@\w+', '', text)

def remove_hashtags(text: str) -> str:
    return re.sub(r'#(\w+)', '', text)

def remove_urls(text: str) -> str:
    return re.sub(r'http\S+', '', text)

def strip_variation_selectors(s: str) -> str:
    return ''.join(
        ch for ch in s
        if not unicodedata.name(ch, "").startswith('VARIATION SELECTOR')
    )

def is_emoji(ch: str) -> bool:
    base_ch = strip_variation_selectors(ch)
    return base_ch in emoji.EMOJI_DATA

def handle_reaction_emojis(text: str) -> str:
    """
    –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏:
      - –ó–∞–º–µ–Ω—è–µ–º ¬´–Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ¬ª —ç–º–æ–¥–∑–∏ –Ω–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ.
    """
    if not text:
        return text

    lines = text.split('\n')
    start_idx = max(0, len(lines) - 3)

    used_emojis = set()
    for i in range(start_idx, len(lines)):
        new_line = []
        for ch in lines[i]:
            if is_emoji(ch):
                base_ch = strip_variation_selectors(ch)
                if base_ch in emogies:
                    new_line.append(base_ch)
                else:
                    available = list(set(emogies) - used_emojis)
                    pick = random.choice(available) if available else random.choice(emogies)
                    new_line.append(pick)
                    used_emojis.add(pick)
            else:
                new_line.append(ch)
        lines[i] = ''.join(new_line)

    return '\n'.join(lines)

def has_reactions_in_last_3_lines(text: str, allowed_emojis=None) -> bool:
    if not text or not allowed_emojis:
        return False

    lines = text.split('\n')
    last_3 = lines[-3:] if len(lines) >= 3 else lines

    pattern = r'^(' + '|'.join(map(re.escape, allowed_emojis)) + r')\s*[-‚Äî]\s+.+'
    for line in last_3:
        if re.search(pattern, line.strip()):
            return True
    return False

# =========================
# –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
async def paraphrase_text(text: str) -> str:
    """
    1) –£–¥–∞–ª—è–µ–º @, —Ö—ç—à—Ç–µ–≥–∏, —Å—Å—ã–ª–∫–∏
    2) –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)
    3) handle_reaction_emojis
    4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ -> —Ñ–æ—Ä–º–∏—Ä—É–µ–º system_prompt
    5) Use Groq for paraphrasing
    """
    text = text.strip()
    if not text:
        return ""

    lines = text.split('\n')
    if lines:
        text = '\n'.join(lines[:-1]).strip()

    # 1) –û—á–∏—Å—Ç–∫–∞
    text = remove_telegram_links(text)
    text = remove_hashtags(text)
    text = remove_urls(text)

    # 3) –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —ç–º–æ–¥–∑–∏
    text = handle_reaction_emojis(text)

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏–∏
    has_reactions = has_reactions_in_last_3_lines(text, emogies)
    
    if has_reactions:
        system_prompt = (
            "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —ç–º–æ–¥–∑–∏ –∏ –∏—Ö –ø–æ—Ä—è–¥–æ–∫, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤. "
            "–†–µ–∞–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö."
        )
    else:
        system_prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —ç–º–æ–¥–∑–∏ –∏ –Ω–µ –º–µ–Ω—è–π –∏—Ö –ø–æ—Ä—è–¥–æ–∫, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤. "
        "\n\n–ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å—Ç—Ä–æ–∫–∞—Ö –Ω–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ‚ù§Ô∏è, üëç, üëé, ü§£, üò¢, üî•, ü§¨, üôè, üò±, "
        "–¥–æ–±–∞–≤—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ä–æ–≤–Ω–æ 3 –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∞–∫—Ü–∏–π. "
        "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ (–∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞), "
        "–ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏ –∏–¥–µ—Ç –¥–µ—Ñ–∏—Å –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚ù§Ô∏è - (–æ–¥–æ–±—Ä–µ–Ω–∏–µ)\n"
        "üëé - (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)\n"
        "üò± - (—É–¥–∏–≤–ª–µ–Ω–∏–µ)\n\n"
        "–¢–æ–ª—å–∫–æ —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —ç–º–æ–¥–∑–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
    )

    # 5) –ó–∞–ø—Ä–æ—Å –∫ Groq
    try:
        response = groq_client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text},
            ],
            temperature=0.7,
            max_tokens=800
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq: {e}")
        return text

# =========================
# FSM
# =========================
class AddChannelStates(StatesGroup):
    waiting_for_channel_username = State()
    waiting_for_custom_link = State()
    waiting_for_display_name = State()

class PostStates(StatesGroup):
    waiting_for_channel_selection = State()

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
# =========================
def admin_only(func):
    async def wrapper(message: Message, state: FSMContext):
        if message.from_user.id not in ADMINS:
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!")
            return
        return await func(message, state)
    return wrapper

# =========================
# –ö–æ–º–∞–Ω–¥—ã
# =========================

@dp.message(Command("start"))
@admin_only
async def cmd_start(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    """
    await state.clear()
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:</b>\n\n"
        "/addchannel ‚Äì –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª (—á–µ—Ä–µ–∑ @username)\n"
        "/listchannels ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã\n"
        "/delchannel ‚Äì –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–ª—å–±–æ–º (–∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç–æ–º, "
        "–∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã."
    )
    await message.answer(text)

@dp.message(Command("listchannels"))
@admin_only
async def cmd_listchannels(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /listchannels
    """
    if not CHANNELS_DB:
        await message.answer("<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.</b>")
        return

    lines = []
    for ch in CHANNELS_DB:
        user = ch["username"]
        title = ch["title"]
        display_name = ch.get("display_name","")
        lines.append(f"‚Ä¢ {title} ({user}) ‚Äî Display: {display_name}")

    text = "<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n" + "\n".join(lines)
    await message.answer(text)

@dp.message(Command("addchannel"))
@admin_only
async def cmd_addchannel(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /addchannel
    """
    await state.set_state(AddChannelStates.waiting_for_channel_username)
    await message.answer(
        "<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @MyPublicChannel)."
    )

@dp.message(AddChannelStates.waiting_for_channel_username, F.text)
async def process_channel_username(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ @username –∫–∞–Ω–∞–ª–∞
    """
    username = message.text.strip()
    if not username.startswith('@'):
        await message.answer("<b>–ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @!</b>")
        return

    try:
        chat = await bot.get_chat(username)
        channel_title = chat.title or username

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for c in CHANNELS_DB:
            if c["username"].lower() == username.lower():
                await message.answer("<b>–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å!</b>")
                await state.clear()
                return

        await state.update_data(channel_username=username, channel_title=channel_title)
        await state.set_state(AddChannelStates.waiting_for_custom_link)
        await message.answer(
            f"<b>–ö–∞–Ω–∞–ª {channel_title} ({username}) –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä: https://example.com)."
        )
    except Exception as e:
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:</b> {e}")

@dp.message(AddChannelStates.waiting_for_custom_link, F.text)
async def process_custom_link(message: Message, state: FSMContext):
    """
    –í–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
    """
    await state.update_data(custom_link=message.text.strip())
    await state.set_state(AddChannelStates.waiting_for_display_name)
    await message.answer("<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (display_name) –¥–ª—è –∫–æ–Ω—Ü–∞ –ø–æ—Å—Ç–æ–≤:</b>")

@dp.message(AddChannelStates.waiting_for_display_name, F.text)
async def process_display_name(message: Message, state: FSMContext):
    """
    –í–≤–æ–¥–∏–º display_name
    """
    display_name = message.text.strip()
    data = await state.get_data()
    username = data["channel_username"]
    channel_title = data["channel_title"]
    custom_link = data["custom_link"]

    CHANNELS_DB.append({
        "username": username,
        "title": channel_title,
        "custom_link": custom_link,
        "display_name": display_name
    })
    save_channels()

    await state.clear()
    await message.answer(
        f"<b>–ö–∞–Ω–∞–ª {channel_title} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
        f"–°—Å—ã–ª–∫–∞: {custom_link}, DisplayName: {display_name}"
    )

@dp.message(Command("delchannel"))
@admin_only
async def cmd_delchannel(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /delchannel
    """
    if not CHANNELS_DB:
        await message.answer("<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.</b>")
        return

    builder = InlineKeyboardBuilder()
    for ch in CHANNELS_DB:
        builder.button(
            text=f"–£–¥–∞–ª–∏—Ç—å {ch['title']} ({ch['username']})",
            callback_data=f"delete_channel:{ch['username']}"
        )
    builder.adjust(1)
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("delete_channel:"))
@admin_only
async def callback_delete_channel(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    """
    username = callback.data.split(":", maxsplit=1)[1]

    for i,ch in enumerate(CHANNELS_DB):
        if ch['username'] == username:
            del CHANNELS_DB[i]
            save_channels()
            await callback.answer(f"–ö–∞–Ω–∞–ª {username} —É–¥–∞–ª—ë–Ω.")
            await callback.message.edit_text("<b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>")
            return

    await callback.answer("<b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", show_alert=True)


# =========================
# –õ–û–ì–ò–ö–ê –ê–õ–¨–ë–û–ú–û–í (media_group_id) - –≤—Ä—É—á–Ω—É—é
# =========================

media_groups_buffer = {}  # {media_group_id: {...}}
ALBUM_TIMEOUT = 2.0  # —Å–µ–∫.

async def finish_album(media_group_id: str, last_message: Message, state: FSMContext):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–µ—Ä—É, –∫–æ–≥–¥–∞ —Ä–µ—à–∏–ª–∏, —á—Ç–æ –∞–ª—å–±–æ–º —Å–æ–±—Ä–∞–Ω
    """
    await asyncio.sleep(ALBUM_TIMEOUT)
    data = media_groups_buffer.pop(media_group_id, None)
    if not data:
        return

    photos = data["photos"]
    videos = data["videos"]
    captions = data["captions"]

    original_text = "\n".join(captions).strip()
    paraphrased_text = ""
    if original_text:
        paraphrased_text = await paraphrase_text(original_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(
        paraphrased_text=paraphrased_text,
        photos=photos,
        videos=videos
    )

    total_files = len(photos)+len(videos)
    preview_text = "<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª—å–±–æ–º–∞:</b>\n\n"
    preview_text += f"‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {total_files}\n"
    preview_text += f"\n{paraphrased_text or '(–ø—É—Å—Ç–æ)'}"

    await state.set_state(PostStates.waiting_for_channel_selection)

    builder = InlineKeyboardBuilder()
    for ch in CHANNELS_DB:
        builder.button(
            text=f"{ch['title']}",
            callback_data=f"select_channel:{ch['username']}"
        )
    builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_post")
    builder.adjust(1)

    await last_message.answer(
        text=preview_text + "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>",
        reply_markup=builder.as_markup()
    )

@dp.message()
@admin_only
async def handle_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π:
    - –ï—Å–ª–∏ –µ—Å—Ç—å media_group_id => –ê–ª—å–±–æ–º
    - –ò–Ω–∞—á–µ => –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    mg_id = message.media_group_id
    if mg_id:
        # –∞–ª—å–±–æ–º
        if mg_id not in media_groups_buffer:
            media_groups_buffer[mg_id] = {
                "photos": [],
                "videos": [],
                "captions": [],
                "timer": None
            }
        data = media_groups_buffer[mg_id]

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
        if message.photo:
            data["photos"].append(message.photo[-1].file_id)
        if message.video:
            data["videos"].append(message.video.file_id)
        if message.caption and message.caption.strip():
            data["captions"].append(message.caption)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if data["timer"]:
            data["timer"].cancel()
        data["timer"] = asyncio.create_task(finish_album(mg_id, message, state))

    else:
        # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        photos = []
        videos = []
        if message.photo:
            photos.append(message.photo[-1].file_id)
        if message.video:
            videos.append(message.video.file_id)

        original_text = message.caption or message.text or ""
        paraphrased_text = ""
        if original_text.strip():
            paraphrased_text = await paraphrase_text(original_text)

        await state.update_data(
            paraphrased_text=paraphrased_text,
            photos=photos,
            videos=videos
        )

        total_files = len(photos)+len(videos)
        preview_text = "<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n"
        if total_files>1:
            preview_text += f"‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {total_files}\n"
        elif len(photos)==1:
            preview_text += "‚Ä¢ –§–æ—Ç–æ\n"
        elif len(videos)==1:
            preview_text += "‚Ä¢ –í–∏–¥–µ–æ\n"
        else:
            preview_text += "‚Ä¢ –ë–µ–∑ –º–µ–¥–∏–∞\n"

        preview_text += f"\n{paraphrased_text or '(–ø—É—Å—Ç–æ)'}"

        await state.set_state(PostStates.waiting_for_channel_selection)
        builder = InlineKeyboardBuilder()
        for ch in CHANNELS_DB:
            builder.button(
                text=f"{ch['title']}",
                callback_data=f"select_channel:{ch['username']}"
            )
        builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_post")
        builder.adjust(1)

        await message.answer(
            text=preview_text + "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>",
            reply_markup=builder.as_markup()
        )

# =========================
# –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
# =========================
@dp.callback_query(PostStates.waiting_for_channel_selection, F.data.startswith("select_channel:"))
async def cb_select_channel(callback: CallbackQuery, state: FSMContext):
    username = callback.data.split(':', maxsplit=1)[1]
    data = await state.get_data()
    selected_channels = data.get("selected_channels", [])

    if username in selected_channels:
        selected_channels.remove(username)
        await callback.answer(f"–ö–∞–Ω–∞–ª {username} —É–±—Ä–∞–Ω.")
    else:
        selected_channels.append(username)
        await callback.answer(f"–ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω.")

    await state.update_data(selected_channels=selected_channels)


@dp.callback_query(PostStates.waiting_for_channel_selection, F.data=="send_post")
async def cb_send_post(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    paraphrased_text = data.get("paraphrased_text","")
    photos = data.get("photos",[])
    videos = data.get("videos",[])
    selected_channels = data.get("selected_channels",[])

    if not selected_channels:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!", show_alert=True)
        return

    all_files = []
    for p in photos:
        all_files.append(("photo", p))
    for v in videos:
        all_files.append(("video", v))

    for username in selected_channels:
        ch_data = next((c for c in CHANNELS_DB if c['username']==username), None)
        if not ch_data:
            logging.error(f"Channel {username} not found!")
            continue

        display_name = ch_data.get("display_name","")
        custom_link = ch_data.get("custom_link","")

        paragraphs = paraphrased_text.split('\n\n',1)
        if len(paragraphs)>1:
            first_p, rest = paragraphs
            post_text = f"<b>{first_p}</b>\n\n{rest}\n\n<a href=\"{custom_link}\">{display_name}</a>"
        else:
            post_text = f"<b>{paraphrased_text}</b>\n\n<a href=\"{custom_link}\">{display_name}</a>"

        try:
            if not all_files:
                # –Ω–µ—Ç –º–µ–¥–∏–∞
                await bot.send_message(username, post_text)
            elif len(all_files)==1:
                # –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
                t, f_id = all_files[0]
                if t=="photo":
                    await bot.send_photo(username, f_id, caption=post_text)
                else:
                    await bot.send_video(username, f_id, caption=post_text)
            else:
                # –∞–ª—å–±–æ–º
                media_group = []
                for i,(t,f_id) in enumerate(all_files):
                    if i==0:
                        if t=="photo":
                            media_group.append(InputMediaPhoto(media=f_id, caption=post_text))
                        else:
                            media_group.append(InputMediaVideo(media=f_id, caption=post_text))
                    else:
                        if t=="photo":
                            media_group.append(InputMediaPhoto(media=f_id))
                        else:
                            media_group.append(InputMediaVideo(media=f_id))

                await bot.send_media_group(username, media_group)
            await asyncio.sleep(1)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {username}: {e}")

    await state.clear()
    await callback.message.edit_text("<b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
    await callback.answer()

# =========================
# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
# =========================
async def setup_menu_buttons():
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ"),
        BotCommand(command="addchannel", description="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
        BotCommand(command="listchannels", description="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"),
        BotCommand(command="delchannel", description="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"),
    ]
    await bot.set_my_commands(commands)
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands(type="commands"))

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
async def main():
    try:
        await setup_menu_buttons()
        await dp.start_polling(bot)
    finally:
        save_channels()
        await bot.session.close()

if __name__=="__main__":
    asyncio.run(main())
